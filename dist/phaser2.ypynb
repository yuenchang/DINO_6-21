{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Phaser Documents\n",
    "\n",
    "### here are some reminders: \n",
    "1. loading img size must be similar to the size you display on screen, it may cause high CPU usage when scaling img size on \n",
    "   rendering\n",
    "2. the render type of phaser game object must be capital, or it will cause high CPU usage too\n",
    "3. the last sprite you create will be on the very top of game world, the may use bringToTop function to move other sprites to \n",
    "   top\n",
    "4. It's better to reuse sprites after game start, using kill() to temporarily deactivate the sprite and reset() to bring it back \n",
    "   to game, use remove() to clear it permanently \n",
    "\n",
    "## 1. environment\n",
    "1. create index.html , app.js , and a assets directory in your public_html   \n",
    "2. index.html must contain cdn of phaser and create a div with id name to place your phaser game,\n",
    "   and don't forget to import your app.js which contains our game logic, it may be something like    this:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "<html>\n",
    "    <head>\n",
    "        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/phaser/2.6.2/phaser.min.js\"></script>\n",
    "        <script src=\"https://code.jquery.com/jquery-3.2.1.js\"></script>\n",
    "        <script src=\"./app.js\"></script>\n",
    "    </head>\n",
    "       \n",
    "    <body>\n",
    "        <div id=\"game\"></div>\n",
    "    </body>\n",
    "</html>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### phaser structure\n",
    "phaser basically go through 4 states when generating a phaser game object\n",
    "1. preload >> load sources of your game, imgs / audios / spritesheets ...\n",
    "2. create  >> create game objects / set game physics / generate tilemaps ...\n",
    "3. update  >> put functions needs to check in a specific time interval here\n",
    "4. render  >> other rendering functions like debug(), normal sprite and game start rendering when creates\n",
    "\n",
    "\n",
    "in app.js code something like below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "const game = new Phaser.Game(width, height, , 'game', {    \n",
    "    preload: () => {\n",
    "    \n",
    "    \n",
    "    \n",
    "    },\n",
    "    create: () => {\n",
    "        \n",
    "    },\n",
    "    update: () => {\n",
    "        \n",
    "    },\n",
    "    render: () => {\n",
    "        \n",
    "    }\n",
    "})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* width / height = your desired game display size in px<br>\n",
    "* render_type = Phaser.AUTO / CANVAS / WEBGL / HEADLESS (no render)<br> \n",
    "* target_DOM = The DOM element which this games canvas will be injected into\n",
    "\n",
    "## 2. basic methods\n",
    "### > loading source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.load.spritesheet('aaa', url, frame_width, frame_height)\n",
    "game.load.image(key, url)\n",
    "game.load.audio(key, url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### > create sprite / button"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "sprite = game.add.sprite(x, y, 'aaa', 1)\n",
    "button = game.add.button(x, y, key, func, this), overFrame, outFrame, downFrame, upFrame)\n",
    "\n",
    "sprite.scale.set(1.5)\n",
    "sprite.body.setSize(x, y, width, height)\n",
    "\n",
    "// add callback function\n",
    "sprite.onInputDown.add(func_name, this)\n",
    "button.onInputOver.add(func_name, this)\n",
    "button.onInputOut.add(func_name, this)\n",
    "button.onInputUp.add(func_name, this)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### > tween =  define start and end states, computer will compute the in-beTWEEN frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tween = game.add.tween(sprite).to(properties, time, ease_function, autostart)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* properties = {angle: 0, alpha: 0.5 ...}<br>\n",
    "* time = in ms<br>\n",
    "* ease funciton = default linear (others: Phaser.Easing.Sinusoidal.InOut ...)\n",
    "\n",
    "### > add audio\n",
    "audio loads the full music of a file, you can customize it by addMaker() function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sound = game.add.audio(unique_key)\n",
    "sound.addMarker(marker_key, start_time, end_time, volume, loop) \n",
    "sound.play(marker_key)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### > add keyboard input\n",
    "basic key input only contain up, down, left, right. You may add custom key using key name like Phaser.Keyboard.SPACEBAR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "keyboard = game.input.keyboard.createCursorKeys() \n",
    "custom = game.input.keyboard.addKey(key_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "put key input checking function into update function like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if (keyboard.up.isDown) { ... } \n",
    "if (custom.isDown) { ... }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. advanced methods\n",
    "### > physics settings\n",
    "#### world settings -- set these in create() function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.physics.startSystem(Phaser.Physics.ARCADE)\n",
    "game.physics.arcade.gravity.y = 600 \n",
    "game.world.setBounds(0, 0, width, height)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### game object settings -- set these after the world physics are done"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.physics.enable(sprite, physics_type)\n",
    "sprite.collideWorldBounds = true"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "add collision checking function in the update function: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.physics.arcade.collide(sprite_1, sprite_2, collide_callback_func, process_callback, callback_context);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* sprite = you can replace sprite by groups (group of sprite that share same settings)<br>\n",
    "* properties = function that runs when collide<br>\n",
    "* time = perform additional check, collide if this returns true<br>\n",
    "* ease funciton = usually <b>this<br>\n",
    "    \n",
    "### > generate tilemaps\n",
    "Tilemaps are split into two parts: The actual map data (usually stored in a CSV or JSON file) and the tilesets used to render the map.<br>\n",
    "before doing this step, make sure you have json file of tilesets and tilemaps. If not, do steps below:\n",
    "\n",
    "1. draw a tilemap and a tileset first (use Tiled) and output both as json, beware that the height of tilemap must be same as  your game height to prevent display error\n",
    "2. put tileset json into tileset key as value in tilemap file\n",
    "\n",
    "Here we load our tilemap first:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.load.tilemap('bbb', url_of_json_file, null, format_of_map_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* json object can be null if you have second param \n",
    "* format of map data, ex: Phaser.Tilemap.TILED_JSON\n",
    "\n",
    "Now we load the tilesets we use to generate map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.phaser.load.image('ccc', url_of_tiles)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Adds an image to the map to be used as a tileset. A single map may use multiple tilesets: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "map = game.add.tilemap('bbb')\n",
    "map.addTilesetImage(tileset_name, 'ccc') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now set collision of map tiles (the frame count starts from 1):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "map.setCollisionBetween(1, 5)\n",
    "map.setCollision(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### map layers\n",
    "here we create tilemap layers :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer = map.createLayer('') // must match layers[].name value\n",
    "layer.resizeWorld() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "same as above, set your collision checking function in update function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "game.physics.arcade.collide(sprite, layer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### > animation\n",
    "after loading sprite sheets, you can add animation to that sprite:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sprite.animations.add('run', [3,2,1], 5, replay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "you may play it whenever you want by function below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sprite.play('run')\n",
    "sprite.animations.stop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "sometimes you will want to do things after animation is done:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sprite.animations._anims['run'].onComplete.add(\n",
    "    function () { alert('aaa') }, this\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
